initialize() {
	
	initializeMutationRate(7.1e-9);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.colorSubstitution = "red";
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 119999999);
	
	initializeRecombinationRate(1e-8);
}


1 {
	sim.addSubpop("p1", NsStart);
	p1.setSelfingRate(0.95);
	sim.chromosome.colorSubstitution = "";
	defineConstant('SimPop', getSeed());
	
	// After colonization of the first island, initial growth
	//
	sim.rescheduleScriptBlock(s0, 2, (Ttot-4100-1));
	
	// Colonization ofthe second island from the first
	//
	sim.rescheduleScriptBlock(s1, (Ttot-4100), (Ttot-4100));
	
	// Growth in the island colonised first, after the split
	//
	sim.rescheduleScriptBlock(s2, (Ttot-4100+1), (Ttot));
		
	// Growth in the second island colonised, after the split
	//
	sim.rescheduleScriptBlock(s3, (Ttot-4100+1), (Ttot-4100+Tf));
	
	// Final growth in the second island 
	// (potentially different growth rate)
	// 
	sim.rescheduleScriptBlock(s4, (Ttot-4100+Tf+1), Ttot);
	
	// Close it, present day!
	//
	sim.rescheduleScriptBlock(s5, (Ttot), (Ttot));
}

1 late() {
	
	// Build up the standing genetic variation 
	// In the coloniser
	//
	L=119999999;
	inds = sim.subpopulations.individuals;
	for (ind in inds) {
		// For homozygote mutations
		position=runif(asInteger(0.00538*L), min=0, max=1);
		intPositions=asInteger(position*L);		
		ind.genomes.addNewMutation(m1, 0.0, intPositions);
		
		// For hets
		position=runif(asInteger(0.0000538*L), min=0, max=1);
		intPositions=asInteger(position*L);		
		ind.genomes[0].addNewMutation(m1, 0.0, intPositions);
	}
	
	p1_s = p1.sampleIndividuals(NsStart);
	samples_pop = c(p1_s);
	
	samples_pop.genomes.outputVCF ("./cvi3_Ttot" + Ttot + "_nsStart" + NsStart + "_nfStart" + NfStart + "_ns" + Ns + "_nf" + Nf + "_tf" + Tf + "_rep" + repl + ".vcf_colonisers.vcf");
	
	cat(paste("Input Ns", " ") + "\n");
	cat(paste(asInteger(Ns), " ") + "\n");
	
	cat(paste("Input Nf", " ") + "\n");
	cat(paste(asInteger(Nf), " ") + "\n");
		
	cat(paste("Input Tf", " ") + "\n");
	cat(paste(asInteger(Tf), " ") + "\n");
}




/////
//
//			Colonization: a single island first, then it splits into a second island
//	
/////




s0 10000  {	
	//
	// After colonisation of the first island, 
	// Ne grows at a certain rate thay varies with input
	// 	
	r = (Ns/NsStart)^(1/(Ttot-4100-1));
	newSize = asInteger(NsStart * r^(sim.generation));
	p1.setSubpopulationSize(newSize);
}

s1 10000 {
	//
	//	Then the second island gets colonised from the first:
	//	Single seed dispersal
	//
	sim.addSubpopSplit("p2", NfStart, p1); 
	p2.setSelfingRate(0.95); 
	
	cat(paste("Size of 1st island at gen 4.1k", " ") + "\n");
	cat(paste(asInteger(p1.individualCount), "") + "\n");
}
//", asString(p1.individualCount))); }





/////
//
//			Growth in the first island after the split
//	
/////


s2 10000 {
	//	
	// After the split, on the 1st island: 
	// Growth at certain rate
	//
	r = (10000/Ns)^(1/(4100-1));
	newSize = asInteger(Ns * r^(sim.generation - (Ttot-4100+1)));
	p1.setSubpopulationSize(newSize);
}




/////
//
//			Growth in the second island   
//	
/////


s3 10000 {
	//	
	// First generations in the second island: 
	// From low Ne, growth at certain rate
	//
	r = (Nf/NfStart)^(1/(Tf-1));
	newSize = asInteger(NfStart * r^(sim.generation - (Ttot-4100+1)));
	p2.setSubpopulationSize(newSize);
}

s4 10000 {
	//
	//	Later in the second island: 
	// Growth rate can be different from the first period
	//
	r = (10000/Nf)^(1/(4100-Tf-1));
	newSize = asInteger(Nf * r^(sim.generation - (Ttot-4100+Tf)));
	p2.setSubpopulationSize(newSize);
}


/////
//
//			The end! Present day and close it
//	
/////



s5 10000 late() { 
	// sample of all populations  
	// sampling individuals from populations 
	//
	p1_s = p1.sampleIndividuals(100);
	p2_s = p2.sampleIndividuals(100);
	samples_pop = c(p1_s, p2_s);
	
	// output of all the subpop samples. Genome 1 
	//
 
 	samples_pop.genome1.outputVCF ("./cvi3_Ttot" + Ttot + "_nsStart" + NsStart + "_nfStart" + NfStart + "_ns" + Ns + "_nf" + Nf + "_tf" + Tf + "_rep" + repl + ".vcf");
 	
 	cat(paste("Final size of Island1", " ") + "\n");
	cat(paste(asInteger(p1.individualCount), "") + "\n");
	
	cat(paste("Final size of Island2", " ") + "\n");
	cat(paste(asInteger(p2.individualCount), "") + "\n");
}






