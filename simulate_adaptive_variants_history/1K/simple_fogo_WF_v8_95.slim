// set up a simple neutral simulation
initialize() {

	//Added a 1K generations and no expansion 
	seed = getSeed();
	//	Constant to save the file 
	outfile_name="rec_news_";
	
//	//	//Debugging
//	if (!exists("OUTPATH")) {
//		defineConstant("OUTPATH", "/Users/pacheco/Documents/Fogo_models/out/" + outfile_name + seed + 1 + ".txt");
//	}
	
	
	//Path
	if (!exists("OUTPATH")) {
		defineConstant("OUTPATH", PATH + outfile_name + seed + ".txt");
	}
	
	
	
	initializeMutationRate(1.5e-6);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.0, "f", 0.09273); //Recessive dominance 
	
	// Total individuals
	defineConstant("K", 400);
	
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m2, 1.0);
	m2.color = "red";
	m2.mutationStackPolicy = "f";
	
	
	m2.convertToSubstitution = T; 
	
	initializeGenomicElement(g1, 2, 1500000);
	
	initializeGenomicElement(g2, 0, 1); //Vernalization variant
	//	
	initializeRecombinationRate(1.8e-8);
	
}

1 {
	sim.addSubpop("p1", K);
	p1.setSelfingRate(0.95);
	p1.tag = 0; //No m2 yet 
}


1:100 early(){
	//Header for file
	if (sim.generation == 1){
		cat("gen	frequency	fixed\n");
		head = "gen " + "frequency " + "fixed";
		
		//Write header
		writeFile(OUTPATH, head);
	}
}

//Check every generation if the variant has fixed or if it has been lost
1:1000 late() {

	m2_muts = sim.mutationsOfType(m2);
	freq = sim.mutationFrequencies(p1, m2_muts);
	
	//Check freq 
	fixed = (sum(sim.substitutions.mutationType == m2) == 1);
	if(fixed)
	{
		p1.tag = 1;
		cat(format("%5d	", sim.generation));
		cat(format("%6.3f	", 1.0));
		cat("fixed" + "\n");
		
		fixed_write = paste(c(sim.generation, 1.0, "F"));
		writeFile(OUTPATH, fixed_write, append=T);
		sim.simulationFinished();
	
	}
	if (sim.countOfMutationsOfType(m2) == 0)
	{
		if (p1.tag ==0){
			
			cat(format("%5d	", sim.generation));
			cat(format("%6.3f	", 0.0));
			cat("lost" + "\n");
			
			lost_write = paste(c(sim.generation, 0.0, "L")); //lost
			writeFile(OUTPATH, lost_write, append=T);
		}
	}
	else
	{
		if(sim.countOfMutationsOfType(m2) == 1){
			cat(format("%5d	", sim.generation));
			cat(format("%6.3f	", freq));
			cat("segregating" + "\n");			
			seg_write = paste(c(sim.generation, freq, "S")); //not fixed
			writeFile(OUTPATH, seg_write, append=T);
		
		}
	
	}


}

1000 late(){
	sim.simulationFinished();
}
