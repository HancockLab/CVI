# points(x=positions, y=clr, type="s", col="blue3", axes=F, ylab="", xlab="", add=T)
axis(1, at=thresh, tick=TRUE, labels=F, cex=1.8)
#chrName = c(152, 402, 617, 826.5, 1053.5)
axis(1, at=chrName, tick=F, labels=c("Chr1", "Chr2", "Chr3", "Chr4", "Chr5"), line=-0.8) # , cex.axis=1.5)
axis(2, at=c(0, 30, 60), labels=c("0", "30", "60"), tick=TRUE, las=1) # , cex.axis=1.5)
title("", xlab="", ylab=expression(paste("CLR")), line=1.8)
}
dev.off()
pdf("/Volumes/CVI_backup/final/cvi/sweepfinder/sweepfinder_fogo_withThresh_03.pdf", width=4.33071, height=1.77165)
# par(mar=c(2,5,0.5,3), mfrow=c(4,1))
# par(ps=8, mar=c(2,5,0.5,3), mfrow=c(1,1))
par(ps=7, mfrow=c(1,1), mar=c(1.1,2.7,0.5,0.5))
windows = c("10000") # c("10000", "50000", "100000", "1000000")
plotW=c(10, 5, 2, 1)
# windows = c("10000")
for (w in 1:length(windows)) {
win = windows[[w]]
winSize = win
thresh=vector()
length(thresh) = 6
thresh[[1]] = 0
maxClr=0.0
positions=vector()
pos_s=vector()
chr=vector()
clr=vector()
for (c in 1:5) {
# m = as.matrix(read.table(paste("/Volumes/CVI/final/cvi/sweepfinder/fogoAll_4-18/fogoAll_", (c), "_", win, "_sweepResultsOld.txt", sep=""), head=T))
m = as.matrix(read.table(paste("/Volumes/CVI_backup/final/cvi/sweepfinder/fogoAll_4-18/fogoAll_", (c), "_", win, "_sweepResultsNew.txt", sep=""), head=T))
# m = as.matrix(read.table(paste("/Volumes/CVI/final/cvi/sweepfinder/santoNo1-8/SantoNoS1-8_", (c), "_", win, "_sweepResultsOld.txt", sep=""), head=T))
# m = as.matrix(read.table(paste("/Volumes/CVI_backup/final/cvi/sweepfinder/santoNo1-8/SantoNoS1-8_", (c), "_", win, "_sweepResultsNew.txt", sep=""), head=T))
positions = append(positions, (as.integer(m[,1]) + thresh[[c]]))
pos_s = append(positions, (as.integer(m[,1])))
chr = append(chr, rep(c, length(m[,1])))
clr = append(clr, as.double(m[,2]))
# Get Thresholds among chromosomes
thresh[[c+1]] = thresh[[c]] + length(m[,1])*as.integer(winSize)
# Get maximum clr
if (max(m[,2]) > maxClr) {
maxClr = max(m[,2])
}
}
#maxClr = 400
plot(0, 0, type="n", axes=F, ylab="",  # list(expression("CLR"), cex=1.5),
xlab="", xlim=c(thresh[[1]], thresh[[6]]), ylim=c(0, maxClr+1))
polygon(x=c(0, 0, thresh[[2]], thresh[[2]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
polygon(x=c(thresh[[3]], thresh[[3]], thresh[[4]], thresh[[4]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
polygon(x=c(thresh[[5]], thresh[[5]], thresh[[6]], thresh[[6]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
centromeres = c(15084050, 3616850, 13590100, 3953300, 11705550)
#centromeres = c(151, (thresh[[2]]+36), (thresh[[3]]+136), (thresh[[4]]+40), (thresh[[5]]+117))
chrName=vector()
length(chrName) = 5
for (c in 1:5) {
centr = centromeres[[c]] + thresh[[c]]
chrName[[c]] = thresh[[c]] + (thresh[[c+1]]-thresh[[c]])/2
polygon(x=c(centr-50000, centr-50000, centr+50000, centr+50000 ), y=c(0, maxClr+1, maxClr+10, 0), col = "darkgrey", border = "darkgrey")
}
chrName
#polygon(x=c(20000000, 20000000, 21000000, 21000000), y=c(0, maxClr+10, maxClr+10, 0), col = "red", border = "red")
cutoff =quantile(clr, probs = c(0.95)) # =4.720997
for (snp in 1:length(clr)) {
irtPos=10707874
if (clr[[snp]] > 40) {
# print(paste(clr[[snp]], positions[[snp]]-thresh[[c-1]], sep=" "))
}
if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(plotW[[w]]*as.integer(winSize)) && positions[[snp]]-thresh[[c-1]] <= irtPos+(plotW[[w]]*as.integer(winSize)))) {
if (clr[[snp]] >= cutoff) {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(39/255, 39/255, 0, 1.0), axes=F, ylab="", xlab="", add=T)
} else {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(0, 0, 205/255, 0.1), axes=F, ylab="", xlab="", add=T)
}
} else {
}
}
for (snp in 1:length(clr)) {
irtPos=10707874
if (clr[[snp]] > 40) {
}
if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(plotW[[w]]*as.integer(winSize)) && positions[[snp]]-thresh[[c-1]] <= irtPos+(plotW[[w]]*as.integer(winSize)))) {
if (clr[[snp]] >= cutoff) {
} else {
}
} else {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(255/255, 0, 0, 1.0), axes=F, ylab="", xlab="", add=T)
print(paste("Irt1: ", clr[[snp]], positions[[snp]]-thresh[[c-1]], sep=" "))
}
}
segments(0, cutoff, positions[[length(positions)]], cutoff, lwd=0.5)
# abline(h=cutoff)
# points(x=positions, y=clr, type="s", col="blue3", axes=F, ylab="", xlab="", add=T)
axis(1, at=thresh, tick=TRUE, labels=F, cex=1.8)
#chrName = c(152, 402, 617, 826.5, 1053.5)
axis(1, at=chrName, tick=F, labels=c("Chr1", "Chr2", "Chr3", "Chr4", "Chr5"), line=-0.8) # , cex.axis=1.5)
axis(2, at=c(0, 30, 60), labels=c("0", "30", "60"), tick=TRUE, las=1) # , cex.axis=1.5)
title("", xlab="", ylab=expression(paste("CLR")), line=1.8)
}
dev.off()
rnorm(10, 10, 1)
rnorm(10, 10, 3)
rnorm(10, 14.5, 3)
cutoff
######
###
#           Plot sweepFinder in Fogo
###
######
pdf("/Volumes/CVI_backup/final/cvi/sweepfinder/sweepfinder_fogo_withThresh_06.pdf", width=4.33071, height=1.77165)
# par(mar=c(2,5,0.5,3), mfrow=c(4,1))
# par(ps=8, mar=c(2,5,0.5,3), mfrow=c(1,1))
par(ps=7, mfrow=c(1,1), mar=c(1.1,2.7,0.5,0.5))
windows = c("100000") # c("10000", "50000", "100000", "1000000")
plotW=c(10, 5, 2, 1)
# windows = c("10000")
for (w in 1:length(windows)) {
win = windows[[w]]
winSize = win
thresh=vector()
length(thresh) = 6
thresh[[1]] = 0
maxClr=0.0
positions=vector()
pos_s=vector()
chr=vector()
clr=vector()
for (c in 1:5) {
# m = as.matrix(read.table(paste("/Volumes/CVI/final/cvi/sweepfinder/fogoAll_4-18/fogoAll_", (c), "_", win, "_sweepResultsOld.txt", sep=""), head=T))
m = as.matrix(read.table(paste("/Volumes/CVI_backup/final/cvi/sweepfinder/fogoAll_4-18/fogoAll_", (c), "_", win, "_sweepResultsNew.txt", sep=""), head=T))
# m = as.matrix(read.table(paste("/Volumes/CVI/final/cvi/sweepfinder/santoNo1-8/SantoNoS1-8_", (c), "_", win, "_sweepResultsOld.txt", sep=""), head=T))
# m = as.matrix(read.table(paste("/Volumes/CVI_backup/final/cvi/sweepfinder/santoNo1-8/SantoNoS1-8_", (c), "_", win, "_sweepResultsNew.txt", sep=""), head=T))
positions = append(positions, (as.integer(m[,1]) + thresh[[c]]))
pos_s = append(positions, (as.integer(m[,1])))
chr = append(chr, rep(c, length(m[,1])))
clr = append(clr, as.double(m[,2]))
# Get Thresholds among chromosomes
thresh[[c+1]] = thresh[[c]] + length(m[,1])*as.integer(winSize)
# Get maximum clr
if (max(m[,2]) > maxClr) {
maxClr = max(m[,2])
}
}
#maxClr = 400
plot(0, 0, type="n", axes=F, ylab="",  # list(expression("CLR"), cex=1.5),
xlab="", xlim=c(thresh[[1]], thresh[[6]]), ylim=c(0, maxClr+1))
polygon(x=c(0, 0, thresh[[2]], thresh[[2]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
polygon(x=c(thresh[[3]], thresh[[3]], thresh[[4]], thresh[[4]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
polygon(x=c(thresh[[5]], thresh[[5]], thresh[[6]], thresh[[6]]), y=c(0, maxClr+10, maxClr+10, 0), col = "lightblue", border = "lightblue")
centromeres = c(15084050, 3616850, 13590100, 3953300, 11705550)
#centromeres = c(151, (thresh[[2]]+36), (thresh[[3]]+136), (thresh[[4]]+40), (thresh[[5]]+117))
chrName=vector()
length(chrName) = 5
for (c in 1:5) {
centr = centromeres[[c]] + thresh[[c]]
chrName[[c]] = thresh[[c]] + (thresh[[c+1]]-thresh[[c]])/2
polygon(x=c(centr-50000, centr-50000, centr+50000, centr+50000 ), y=c(0, maxClr+1, maxClr+10, 0), col = "darkgrey", border = "darkgrey")
}
chrName
#polygon(x=c(20000000, 20000000, 21000000, 21000000), y=c(0, maxClr+10, maxClr+10, 0), col = "red", border = "red")
cutoff =quantile(clr, probs = c(0.99)) # =4.720997  # 17.56322
for (snp in 1:length(clr)) {
irtPos=10707874
if (clr[[snp]] > 40) {
# print(paste(clr[[snp]], positions[[snp]]-thresh[[c-1]], sep=" "))
}
# if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(plotW[[w]]*as.integer(winSize)) && positions[[snp]]-thresh[[c-1]] <= irtPos+(plotW[[w]]*as.integer(winSize)))) {
if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(50000) && positions[[snp]]-thresh[[c-1]] <= irtPos+(50000))) {
if (clr[[snp]] >= cutoff) {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(39/255, 39/255, 0, 1.0), axes=F, ylab="", xlab="", add=T)
} else {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(0, 0, 205/255, 0.1), axes=F, ylab="", xlab="", add=T)
}
} else {
}
}
for (snp in 1:length(clr)) {
irtPos=10707874
if (clr[[snp]] > 40) {
}
# if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(plotW[[w]]*as.integer(winSize)) && positions[[snp]]-thresh[[c-1]] <= irtPos+(plotW[[w]]*as.integer(winSize)))) {
if (!(chr[[snp]] == 4 && positions[[snp]]-thresh[[c-1]] >= irtPos-(50000) && positions[[snp]]-thresh[[c-1]] <= irtPos+(50000))) {
if (clr[[snp]] >= cutoff) {
} else {
}
} else {
points(x=positions[[snp]], y=clr[[snp]], pch=20, col=rgb(255/255, 0, 0, 1.0), axes=F, ylab="", xlab="", add=T)
print(paste("Irt1: ", clr[[snp]], positions[[snp]]-thresh[[c-1]], sep=" "))
}
}
segments(0, cutoff, positions[[length(positions)]], cutoff, lwd=0.5)
# abline(h=cutoff)
# points(x=positions, y=clr, type="s", col="blue3", axes=F, ylab="", xlab="", add=T)
axis(1, at=thresh, tick=TRUE, labels=F, cex=1.8)
#chrName = c(152, 402, 617, 826.5, 1053.5)
axis(1, at=chrName, tick=F, labels=c("Chr1", "Chr2", "Chr3", "Chr4", "Chr5"), line=-0.8) # , cex.axis=1.5)
# axis(2, at=c(0, 30, 60), labels=c("0", "30", "60"), tick=TRUE, las=1) # , cex.axis=1.5)
axis(2, at=c(0, 25, 50), labels=c("0", "25", "50"), tick=TRUE, las=1) # , cex.axis=1.5)
title("", xlab="", ylab=expression(paste("CLR")), line=1.8)
}
dev.off()
cutoff
# Inferno - Lava
uncert=(1.14983016e-02, 8.30587379e-02, 4.24111617e-02, 5.33579097e-02, 8.60709219e-03, 1.33200660e-02, 2.05263939e+01)
fold="inferno-lava_clean_19-04-23_plusNames_dadiJsfs.txt_dadiResults_folded"
fold="inferno-lava_clean_19-04-23_plusNames_dadiJsfs.txt_dadiResults_folded"
L=as.integer(as.matrix(read.table(paste("/Volumes/CVI_backup/final/fogo/dadi/", strsplit(fold, "_dadiJsfs")[[1]][1], "/", strsplit(fold, "_dadiJsfs")[[1]][1], "_snps_nonN_inTheMask.txt", sep=""), head=F))[1,1])
L
theta = 495
theta/L
Nref= theta/(2*mu*L)
Nref
p0=c(0.9883941, 1.04383, 0.2324234, 0.6136191, 0.0003106185, 0.007614105)
p0[[1]]
nStart1_pm=uncert[[1]]*Nref
uncert=c(1.14983016e-02, 8.30587379e-02, 4.24111617e-02, 5.33579097e-02, 8.60709219e-03, 1.33200660e-02, 2.05263939e+01)
nStart1_pm=uncert[[1]]*Nref
nStart1_pm
nStart1
s
p0[[1]]
s=p0[[1]]
nStart1=s*Nref
nStart1
nStart1_pm=uncert[[1]]*Nref
nStart1_pm
N1=p0[[2]]*Nref
N1
p0[[2]]
N1=p0[[2]]*Nref
N1_pm=uncert[[2]]*Nref
N1
N1_pm
N2=p0[[3]]*Nref
N2_pm=uncert[[3]]*Nref
N2
N2_pm
Nref=2446.12991956364
s=p0[[1]]
nStart1=s*Nref
nStart2=(1-s)*Nref
nStart_pm=uncert[[1]]*Nref
nStart_pm
N1_pm=uncert[[2]]*Nref
N1_pm
N2_pm=uncert[[3]]*Nref
N2_pm
N2=p0[[3]]*Nref
N2
Time=p0[[4]]*Nref
Time_pm=uncert[[4]]*Nref
Time
Time_pm
m12=p0[[5]]/Nref
m12
m12_pm=uncert[[5]]/Nref
m12_pm
m22=p0[[6]]/Nref
m22_pm=uncert[[6]]/Nref
m22
m22_pm=uncert[[6]]/Nref
m22_pm
N1=p0[[1]]*Nref
N1_pm=uncert[[1]]*Nref
N1
N1_pm
p0
p0=c(5.946007, 0.248445, 1.525314)
uncert=c(0.3940678, 0.02830759, 0.14737183, 17.50621484)
# Simple split
# N1,N2,T = params
Nref=1331.21709386674
N1=p0[[1]]*Nref
N1_pm=uncert[[1]]*Nref
N1
N1_pm
N2=p0[[2]]*Nref
N2_pm=uncert[[2]]*Nref
N2
N2_pm
Time=p0[[3]]*Nref
Time_pm=uncert[[3]]*Nref
Time
Time_pm
Nref=1806.13361915103
mu=7.1*10^(-9)
N1=p0[[1]]*Nref
N1_pm=uncert[[1]]*Nref
N1
N1_pm
# Inferno - MV
p0=c(1.5249397, 1.1960343, 4.6908414, 0.2782212, 0.7565107)
uncert=c(9.56264645e-01, 4.98132869e+00, 3.50499052e+00, 1.10226058e+00, 8.18363891e-02, 2.58547524e+02)
######
###         Bottleneck
######
###
#           Convert parameters
#           nu1,nuB,nuF,Tb,Tf = params
###
Nref=1806.13361915103
N1=p0[[1]]*Nref
N1_pm=uncert[[1]]*Nref
# Inferno - MV
p0=c(1.5249397, 1.1960343, 4.6908414, 0.2782212, 0.7565107)
uncert=c(9.56264645e-01, 4.98132869e+00, 3.50499052e+00, 1.10226058e+00, 8.18363891e-02, 2.58547524e+02)
######
###         Bottleneck
######
###
#           Convert parameters
#           nu1,nuB,nuF,Tb,Tf = params
###
Nref=1806.13361915103
N1=p0[[1]]*Nref
N1_pm=uncert[[1]]*Nref
N1
N1_pm
Nb=p0[[2]]*Nref
Nb_pm=uncert[[2]]*Nref
Nb
Nb_pm
Nf=p0[[3]]*Nref
Nf_pm=uncert[[3]]*Nref
Nf
Nf_pm
TimeB=p0[[4]]*Nref
TimeB_pm=uncert[[4]]*Nref
TimeB
TimeB_pm
Timef=p0[[5]]*Nref
Timef_pm=uncert[[5]]*Nref
Timef
Timef_pm
Timef_pm + 1991
#         Year zero
#
####
####
pdf("/Users/fulgione/Documents/useful_stuff/investment/towards_fireAndGrund_yearZero_noDollars_may.pdf", height=5, width=10)
par(mfrow=c(1, 1), mar=c(4,5,2,1))
plot(y=0, x=0, ylim=c(0, 2e5), bg = col, col="black", type="n", lwd=0.3, cex=2, axes=F, ylab=list(expression("K Euro"), cex=1.5), xlab=list(expression("Months"), cex=1.5), xlim=c(0, 12))
tot= 24000 + 5000 # + 54000 # Me invest + eva # 54000 + 20000 + 10000 # Dollars plus me, Eva
totManaged=tot
totIn=tot
totGrund = 60000
monthlyIn=2500
xp=vector()
yp=vector()
xin=vector()
yin=vector()
xp = append(xp, 0)
yp = append(yp, tot + totGrund)
xin = append(xin, 0)
yin = append(yin, totIn)
# Plot month zero, starting point
#
segments(0, 0, 0, 2e5, lwd=0.2)
# points(x=0, y=totIn, col="red")
# points(x=0, y=tot + totGrund, col="blue3")
for (year in 1:1) {
for (month in 1:12) {
segments(month, 0, month, 2e5, lwd=0.2)
#
tot = tot + monthlyIn + (0.07/12)*tot # + 1000/12
# Plus dollars plug in
# tot = tot + 54000/12
# print(paste("before dollars: ", tot, sep=" "))
# if (month == 11 || month == 12) {
# tot = tot + 54000/2
# print("dollar")
# }
# print(paste("after dollars: ", tot, sep=" "))
# totManaged = totManaged + monthlyIn + (0.05/12)*totManaged
totIn = totIn + monthlyIn
# Grund casa:
#
if (totGrund < 200000) {
totGrund = totGrund + (9000-(0.02*(200000-totGrund)))/12
} else {
tot = tot + 9000/12
}
# Bare investments in the market:
#
# points(x=month, y=totIn, col="red")
# points(x=month, y=tot + totGrund, col="blue3")
# points(x=month, y=totManaged + totGrund, col="green")
xp = append(xp, month)
yp = append(yp, tot + totGrund)
xin = append(xin, month)
yin = append(yin, totIn)
print(paste(month, tot, totGrund, (tot + totGrund), sep=" "))
}
# print(paste(year, (tot + totGrund), sep=" "))
}
lines(xp, yp, col="blue3", type="b,c")
lines(xin, yin, col="red", type="b,c")
axis(1, at=seq(0, 12, 1), labels=T, tick=TRUE, las=1, cex.axis=1.2)
axis(2, at=seq(0, 2e5, 25e3), labels=seq(0, 2e2, 25), tick=TRUE, las=1, cex.axis=1.2)
for (i in 0:(200/25)) {
segments(0, 25000*i, 12, 25000*i, lwd=0.2)
}
###
#     Now the actual net worth
###
lines(x=c(0, 1, 2, 3, 4, 5),
y=c(60000 + 24000 + 5000,                   ## End of:
27500+13500+60000+1*(6000/12),            #    January
28895+14755+60000+2*(6000/12),            #    February
28895+14755+60000+3*(6000/12),            #    March
51626.5+60000+4*(6000/12),                #    April
41085.08+20993.25+60000+5*(6000/12)       #    May
# Andrea degiro + Eva degiro + base grund + aumento casa grund
), col="black", type="b,c")
dev.off()
41085.08+20993.25+60000+5*(6000/12)
41085.08+20993.25
31085.08+20993.25
pdf("/Users/fulgione/Documents/useful_stuff/investment/towards_fireAndGrund_yearZero_noDollars_may.pdf", height=5, width=10)
par(mfrow=c(1, 1), mar=c(4,5,2,1))
plot(y=0, x=0, ylim=c(0, 2e5), bg = col, col="black", type="n", lwd=0.3, cex=2, axes=F, ylab=list(expression("K Euro"), cex=1.5), xlab=list(expression("Months"), cex=1.5), xlim=c(0, 12))
tot= 24000 + 5000 # + 54000 # Me invest + eva # 54000 + 20000 + 10000 # Dollars plus me, Eva
totManaged=tot
totIn=tot
totGrund = 60000
monthlyIn=2500
xp=vector()
yp=vector()
xin=vector()
yin=vector()
xp = append(xp, 0)
yp = append(yp, tot + totGrund)
xin = append(xin, 0)
yin = append(yin, totIn)
# Plot month zero, starting point
#
segments(0, 0, 0, 2e5, lwd=0.2)
# points(x=0, y=totIn, col="red")
# points(x=0, y=tot + totGrund, col="blue3")
for (year in 1:1) {
for (month in 1:12) {
segments(month, 0, month, 2e5, lwd=0.2)
#
tot = tot + monthlyIn + (0.07/12)*tot # + 1000/12
# Plus dollars plug in
# tot = tot + 54000/12
# print(paste("before dollars: ", tot, sep=" "))
# if (month == 11 || month == 12) {
# tot = tot + 54000/2
# print("dollar")
# }
# print(paste("after dollars: ", tot, sep=" "))
# totManaged = totManaged + monthlyIn + (0.05/12)*totManaged
totIn = totIn + monthlyIn
# Grund casa:
#
if (totGrund < 200000) {
totGrund = totGrund + (9000-(0.02*(200000-totGrund)))/12
} else {
tot = tot + 9000/12
}
# Bare investments in the market:
#
# points(x=month, y=totIn, col="red")
# points(x=month, y=tot + totGrund, col="blue3")
# points(x=month, y=totManaged + totGrund, col="green")
xp = append(xp, month)
yp = append(yp, tot + totGrund)
xin = append(xin, month)
yin = append(yin, totIn)
print(paste(month, tot, totGrund, (tot + totGrund), sep=" "))
}
# print(paste(year, (tot + totGrund), sep=" "))
}
lines(xp, yp, col="blue3", type="b,c")
lines(xin, yin, col="red", type="b,c")
axis(1, at=seq(0, 12, 1), labels=T, tick=TRUE, las=1, cex.axis=1.2)
axis(2, at=seq(0, 2e5, 25e3), labels=seq(0, 2e2, 25), tick=TRUE, las=1, cex.axis=1.2)
for (i in 0:(200/25)) {
segments(0, 25000*i, 12, 25000*i, lwd=0.2)
}
###
#     Now the actual net worth
###
lines(x=c(0, 1, 2, 3, 4, 5),
y=c(60000 + 24000 + 5000,                   ## End of:
27500+13500+60000+1*(6000/12),            #    January
28895+14755+60000+2*(6000/12),            #    February
28895+14755+60000+3*(6000/12),            #    March
51626.5+60000+4*(6000/12),                #    April
31085.08+20993.25+60000+5*(6000/12)       #    May
# Andrea degiro + Eva degiro + base grund + aumento casa grund
), col="black", type="b,c")
dev.off()
(4000-3350)/80
95/7
mean(c(11.0737, 17.6821, 12.0926, 14.2112, 11.5976, 8.58616, 19.5954, 17.6266, 20.6538, 17.7329, 22.2736, 16.9794, 11.5419, 15.987, 9.29349, 16.9295, 8.33483, 7.16718, 16.9122, 18.6201, 17.852, 20.3007, 17.8097, 23.0762, 22.2984))
range(c(11.0737, 17.6821, 12.0926, 14.2112, 11.5976, 8.58616, 19.5954, 17.6266, 20.6538, 17.7329, 22.2736, 16.9794, 11.5419, 15.987, 9.29349, 16.9295, 8.33483, 7.16718, 16.9122, 18.6201, 17.852, 20.3007, 17.8097, 23.0762, 22.2984))
32.6*1.1
32.6*1.2
(307840/8080077) / (70594/1864669)
(70594/1864669)/(307840/8080077)
554.79/2
512.45/2
choose(4, 2)
choose(2, 4 )
choose(4, 2)
choose(8, 2)
70676280+42064764
range(c(22.7464, 24.0627, 23.7821, 23.4372, 23.0766, 22.4505, 22.5565, 23.0086, 23.1685, 22.8498, 22.9648, 22.8216, 22.3308, 23.2497, 23.0102, 21.2456, 21.399, 19.4406, 22.1999, 22.999, 20.1435, 22.8708, 22.0941, 21.8874, 23.5867, 22.9496, 21.1633, 23.607, 21.4483, 21.2208, 21.6207, 22.3125, 23.9356, 21.6181, 21.8008, 23.4596, 22.9584, 23.2291, 21.6186, 22.6648, 23.6031, 22.0513, 22.5246, 22.8133, 22.4482, 20.9812, 22.285, 20.4525, 20.8568, 21.7005, 20.9401, 21.1971, 20.8225, 21.797, 23.0962, 22.6148, 21.693, 22.6441, 22.7877, 21.5752, 21.8416, 22.2984, 23.6061, 23.0869, 22.9187, 21.7389, 20.4233, 21.5451, 22.5669, 22.7421, 21.1311, 21.116, 21.539, 22.9764, 21.3919, 21.9139, 21.0114, 22.3495, 22.0229, 22.8638, 21.8778, 22.409, 22.1641, 22.1014, 20.3937, 21.7834, 21.0478, 22.4455, 22.0169, 21.0845, 21.7152, 21.6204, 22.1448, 22.1418, 22.0917, 21.7597, 21.8562, 22.0083, 20.5179, 22.9454, 20.7656, 23.0214, 22.1178, 21.5842, 21.7515, 22.8621, 21.5347, 22.3259, 22.4657, 22.6164, 21.7641, 22.2546, 22.2711, 21.1244, 22.5777, 23.319, 21.6623, 23.0283, 22.5504, 21.4938, 22.8807, 23.4826, 23.5106, 23.3651, 23.0825, 24.2905, 22.7772, 23.6554, 23.9671, 22.5545, 22.6722))
8.73/8.685
setwd("/Users/fulgione/git/CVI")
jsfs = as.matrix(read.table("./data/sa-fo_clean_2020-21-02_sub40_jsfsX.txt", head=F))
jsfs
sum(c(7767, 3077, 1502, 995, 719, 603, 485, 448, 423, 398, 346, 329, 279, 190, 131, 138, 105, 107, 80))
